schema {
  query: Query
  mutation: Mutation
}

interface CreatePersonalAccessTokenError implements Error {
  message: String!
}

interface Error {
  message: String!
}

interface IResource {
  id: Uuid!
  title: String!
  version: ResourceVersion!
}

type AddApiSecretPayload {
  apiResource: ApiResource!
  secret: String!
}

type AddClientSecretPayload {
  client: Client
  secret: String
}

type AddEnvironmentToApplicationPayload {
  application: Application
  clients: [CreatedClientInfo!]!
}

type AddSecretPersonalAccessTokenPayload {
  token: PersonalAccessToken
  secret: String
}

type ApiResource implements IResource {
  tenantInfo: Tenant!
  scopes: [ApiScope!]!
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  id: Uuid!
  tenant: String!
  requireResourceIndicator: Boolean!
  apiSecrets: [Secret!]!
  allowedAccessTokenSigningAlgorithms: [String!]!
  title: String!
  enabled: Boolean!
  name: String!
  displayName: String
  description: String
  userClaims: [String!]
  properties: [KeyValuePairOfStringAndString!]!
  version: ResourceVersion!
}

type ApiScope implements IResource {
  tenantInfo: Tenant!
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  id: Uuid!
  tenant: String!
  showInDiscoveryDocument: Boolean!
  title: String!
  enabled: Boolean!
  name: String!
  displayName: String
  description: String
  userClaims: [String!]
  properties: [KeyValuePairOfStringAndString!]!
  version: ResourceVersion!
}

type Application implements IResource {
  clients: [Client!]!
  userClaimRules: [UserClaimRule!]!
  tenantInfo: Tenant!
  template: ClientTemplate!
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  id: Uuid!
  tenant: String!
  name: String!
  title: String!
  apiScopes: [Uuid!]!
  identityScopes: [Uuid!]!
  redirectUris: [String!]!
  postLogoutRedirectUris: [String!]!
  clientIds: [Uuid!]!
  version: ResourceVersion!
  allowedGrantTypes: [String!]!
  templateId: Uuid!
}

type ApproveResourcesResult {
  resources: [Uuid!]!
}

type ClaimRuleMatch {
  isGlobal: Boolean!
  environmentId: Uuid
  claimType: String!
  value: String!
  matchMode: ClaimRuleMatchMode!
}

type Client implements IResource {
  identityScopes: [Uuid!]
  apiScopes: [Uuid!]
  dependencies: [IResource!]!
  tenantInfo: Tenant!
  application: Application
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  environmentIds: [Uuid!]!
  id: Uuid!
  tenant: String!
  enabled: Boolean!
  clientId: String!
  protocolType: String
  clientSecrets: [Secret!]
  requireClientSecret: Boolean!
  allowTokenGeneration: Boolean!
  name: String!
  description: String
  clientUri: String
  logoUri: String
  requireConsent: Boolean!
  allowRememberConsent: Boolean!
  allowedGrantTypes: [String!]
  requirePkce: Boolean!
  allowPlainTextPkce: Boolean!
  requireRequestObject: Boolean!
  allowAccessTokensViaBrowser: Boolean!
  redirectUris: [String!]!
  postLogoutRedirectUris: [String!]!
  frontChannelLogoutUri: String
  frontChannelLogoutSessionRequired: Boolean!
  backChannelLogoutUri: String
  backChannelLogoutSessionRequired: Boolean!
  allowOfflineAccess: Boolean!
  allowedScopes: [ClientScope!]!
  alwaysIncludeUserClaimsInIdToken: Boolean!
  identityTokenLifetime: Int!
  allowedIdentityTokenSigningAlgorithms: [String!]!
  accessTokenLifetime: Int!
  authorizationCodeLifetime: Int!
  absoluteRefreshTokenLifetime: Int!
  slidingRefreshTokenLifetime: Int!
  consentLifetime: Int
  refreshTokenUsage: TokenUsage!
  updateAccessTokenClaimsOnRefresh: Boolean!
  refreshTokenExpiration: TokenExpiration!
  accessTokenType: AccessTokenType!
  enableLocalLogin: Boolean!
  identityProviderRestrictions: [String!]!
  includeJwtId: Boolean!
  claims: [ClientClaim!]!
  alwaysSendClientClaims: Boolean!
  clientClaimsPrefix: String
  pairWiseSubjectSalt: String
  userSsoLifetime: Int
  userCodeType: String
  deviceCodeLifetime: Int!
  allowedCorsOrigins: [String!]!
  environments: [Uuid!]!
  version: ResourceVersion!
  properties: [KeyValuePairOfStringAndString!]
  dataConnectors: [DataConnectorOptions!]
  enabledProviders: [EnabledProvider!]
  title: String!
  clientDependencies: ClientDependencies!
  ipAddressFilter: IpAddressFilter!
}

type ClientClaim {
  type: String!
  value: String!
  valueType: String!
}

type ClientDependencies {
  apiScopes: [ApiScope!]
  identityResources: [IdentityResource!]
  apiResources: [ApiResource!]
}

type ClientScope {
  type: ScopeType!
  id: Uuid!
}

type ClientTemplate {
  secrets: [ClientTemplateSecret!]!
  tenantInfo: Tenant!
  id: Uuid!
  name: String!
  tenant: String!
  clientIdGenerator: String
  secretGenerator: String
  nameTemplate: String
  urlTemplate: String
  requireClientSecret: Boolean!
  requirePkce: Boolean!
  allowedGrantTypes: [String!]!
  allowAccessTokensViaBrowser: Boolean!
  redirectUris: [String!]!
  postLogoutRedirectUris: [String!]!
  allowOfflineAccess: Boolean!
  apiScopes: [Uuid!]!
  identityScopes: [Uuid!]!
  dataConnectors: [DataConnectorOptions!]
  enabledProviders: [EnabledProvider!]
}

type ClientTemplateSecret {
  environment: String!
  type: String
  value: String
  environmentId: Uuid!
}

type CreateApplicationPayload {
  application: Application
  clients: [CreatedClientInfo!]!
}

type CreatePersonalAccessTokenPayload {
  token: PersonalAccessToken
  errors: [CreatePersonalAccessTokenError!]!
}

type CreatedClientInfo {
  id: Uuid!
  clientId: String!
  name: String!
  secretValue: String
}

type DataConnectorOptions {
  name: String
  enabled: Boolean!
  profileTypeFilter: [ConnectorProfileType!]
  properties: [DataConnectorProperty!]
}

type DataConnectorProperty {
  name: String
  value: String
}

type Dependency {
  apiScopes: [ApiScope!]
  identityResources: [IdentityResource!]
  apiResources: [ApiResource!]
  clients: [Client!]
  personalAccessTokens: [PersonalAccessToken!]
}

type EnabledProvider {
  name: String!
  requestMfa: Boolean!
  userIdClaimType: String
}

type EncryptedValue {
  kind: String!
}

type Environment {
  id: Uuid!
  name: String!
  order: Int!
}

type ExpiresAtInvalid implements Error & CreatePersonalAccessTokenError {
  expiresAt: DateTime!
  message: String!
}

type GrantType {
  id: String!
  name: String!
  tenants: [String!]!
  isCustom: Boolean!
}

type HashAlgorithm {
  name: String!
}

type HashAlgorithmNotFound implements Error & CreatePersonalAccessTokenError {
  hashAlgorithm: String!
  message: String!
}

type HashedToken {
  id: Uuid!
  token: String!
  expiresAt: DateTime!
  createdAt: DateTime!
}

type IdOpsClaimExtension {
  type: String!
  value: String!
}

type IdentityResource implements IResource {
  identityServerGroup: IdentityServerGroup!
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  id: Uuid!
  tenants: [String!]!
  required: Boolean!
  emphasize: Boolean!
  showInDiscoveryDocument: Boolean!
  title: String!
  identityServerGroupId: Uuid!
  enabled: Boolean!
  name: String!
  displayName: String
  description: String
  userClaims: [String!]
  properties: [KeyValuePairOfStringAndString!]!
  version: ResourceVersion!
}

type IdentityServer implements IResource {
  group: IdentityServerGroup!
  keys: [IdentityServerKey!]!
  discoveryDocument: String!
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  id: Uuid!
  environmentId: Uuid!
  name: String!
  url: String!
  title: String!
  groupId: Uuid!
  version: ResourceVersion!
}

type IdentityServerEvent {
  rawData: String!
  id: Uuid!
  eventId: Int!
  message: String
  environmentName: String!
  serverGroupName: String!
  activityId: String
  timeStamp: DateTime!
  processId: Int!
  localIpAddress: String
  remoteIpAddress: String
  hostname: String!
  clientId: String
  subjectId: String
  category: String
  eventType: String
  endpoint: String
  name: String!
  type: String!
  data: [KeyValuePairOfStringAndObject!]
}

type IdentityServerGroup {
  id: Uuid!
  name: String!
  tenants: [String!]!
  color: String
}

type IdentityServerKey {
  kid: String!
  alg: String!
  thumbprint: String
  serialNumber: String
  subject: String
  validUntil: DateTime
}

type IpAddressFilter {
  policy: IpFilterPolicy!
  warnOnly: Boolean!
  allowList: [String!]!
}

type KeyValuePairOfStringAndObject {
  key: String!
}

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

type Mutation @authorize(policy: "ApiAccessPolicy") {
  saveApiScope(input: SaveApiScopeInput!): SaveApiScopePayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  saveIdentityResource(input: SaveIdentityResourceInput!): SaveIdentityResourcePayload! @authorize(policy: "ResourceAuthoringEdit")
  createClient(input: CreateClientInput!): SaveClientPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  updateClient(input: UpdateClientInput!): SaveClientPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  addClientSecret(input: AddClientSecretInput!): AddClientSecretPayload! @authorize(policy: "ResourceAuthoringEdit")
  removeClientSecret(input: RemoveClientSecretInput!): SaveClientPayload! @authorize(policy: "ResourceAuthoringEdit")
  requestToken(input: RequestTokenInput!): RequestTokenPayload! @authorize(policy: "ResourceAuthoringEdit")
  createApplication(input: CreateApplicationInput!): CreateApplicationPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  updateApplication(input: UpdateApplicationInput!): UpdateApplicationPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  removeClientFromApplication(input: RemoveClientInput!): UpdateApplicationPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  addClientToApplication(input: AddClientInput!): UpdateApplicationPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  addEnvironmentToApplication(input: AddEnvironmentToApplicationInput!): AddEnvironmentToApplicationPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  saveTenant(input: SaveTenantInput!): SaveTenantPayload! @authorize(policy: "TenantManage")
  publishResource(input: PublishResourceInput!): PublishResourcePayload! @authorize(policy: "ResourceAuthoringPublish")
  createPersonalAccessToken(input: CreatePersonalAccessTokenInput!): CreatePersonalAccessTokenPayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "PersonalAccessTokenEdit")
  updatePersonalAccessToken(input: UpdatePersonalAccessTokenInput!): SavePersonalAccessTokenPayload! @authorize(policy: "PersonalAccessTokenEdit")
  addSecretToPersonalAccessToken(input: AddSecretPersonalAccessTokenInput!): AddSecretPersonalAccessTokenPayload! @authorize(policy: "PersonalAccessTokenEdit")
  removeSecretOfPersonalAccessToken(input: RemoveSecretPersonalAccessTokenInput!): RemoveSecretPersonalAccessTokenPayload! @authorize(policy: "PersonalAccessTokenEdit")
  saveGrantType(input: SaveGrantTypeInput!): SaveGrantTypePayload! @authorize(policy: "ResourceAuthoringEdit")
  saveEnvironment(input: SaveEnvironmentInput!): SaveEnvironmentPayload! @authorize(policy: "ResourceAuthoringEdit")
  saveIdentityServer(input: SaveIdentityServerInput!): SaveIdentityServerPayload! @authorize(policy: "IdentityServerManage")
  saveIdentityServerGroup(input: SaveIdentityServerGroupInput!): SaveIdentityServerGroupPayload! @authorize(policy: "IdentityServerManage")
  saveClientTemplate(input: SaveClientTemplateInput!): SaveClientTemplatePayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  saveUserClaimRule(input: SaveUserClaimRuleInput!): SaveUserClaimRulePayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  approveResources(input: ApproveResourcesInput!): ApproveResourcesResult! @authorize(policy: "ResourceApproval")
  saveApiResource(input: SaveApiResourceInput!): SaveApiResourcePayload! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringEdit")
  addApiSecret(input: AddApiSecretInput!): AddApiSecretPayload! @authorize(policy: "ResourceAuthoringEdit")
  removeApiSecret(input: RemoveApiSecretInput!): SaveApiResourcePayload! @authorize(policy: "ResourceAuthoringEdit")
}

type NoEncryptedSecretError implements Error {
  message: String!
}

type PersonalAccessToken implements IResource {
  dependencies: [IResource!]!
  tenantInfo: Tenant!
  applications: [Application!]!
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  environmentIds: [Uuid!]!
  id: Uuid!
  title: String!
  version: ResourceVersion!
  userName: String!
  environmentId: Uuid!
  tokens: [HashedToken!]!
  createdAt: DateTime!
  allowedScopes: [Uuid!]!
  allowedApplicationIds: [Uuid!]!
  source: String!
  hashAlgorithm: String!
  claimsExtensions: [IdOpsClaimExtension!]!
  tenant: String!
}

type PublishResourcePayload {
  jobId: Uuid!
  resources: [Uuid!]!
  errors: [UserError!]
}

type PublishedResource {
  id: Uuid!
  title: String!
  type: String!
  currentVersion: ResourceVersion!
  environments: [PublishedResourceEnvironment!]!
}

type PublishedResourceEnvironment {
  environment: Environment!
  approvedAt: DateTime
  version: Int
  publishedAt: DateTime
  state: String
}

type Query @authorize(policy: "ApiAccessPolicy") {
  apiScopes(input: GetApiScopesInput): [ApiScope!]! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringRead")
  clientIdGenerators: [String!]! @authorize(policy: "ResourceAuthoringRead")
  sharedSecretGenerators: [String!]! @authorize(policy: "ResourceAuthoringRead")
  client(id: Uuid!): Client! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringRead")
  searchClients(input: SearchClientsInput!): SearchResultOfClient! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringRead")
  application(id: Uuid!): Application!
  searchApplications(input: SearchApplicationsInput!): SearchResultOfApplication!
  searchUnMappedClients(tenant: String!): [Client!]!
  tenants: [Tenant!]!
  environments: [Environment!]! @authorize(policy: "ResourceAuthoringRead")
  grantTypes: [GrantType!]! @authorize(policy: "ResourceAuthoringRead")
  publishedResouces(input: PublishedResourcesInput): [PublishedResource!]! @authorize(policy: "ResourceAuthoringRead")
  resourcePublishingLog(input: ResourcePublishingLogInput!): [ResourcePublishLog!]! @authorize(policy: "ResourceAuthoringRead")
  searchIdentityServerEvents(input: SearchIdentityServerEventsInput!): SearchResultOfIdentityServerEvent!
  identityResources(input: GetIdentityResourcesInput): [IdentityResource!]! @authorize(policy: "ResourceAuthoringRead")
  searchResourceAudits(input: SearchResourceAuditInput!): SearchResultOfResourceAuditEvent! @authorize(policy: "ResourceAuthoringRead")
  me: User!
  identityServers: [IdentityServer!]!
  identityServersGroups: [IdentityServerGroup!]!
  identityServerGroupByTenant(tenant: String!): IdentityServerGroup
  identityServer(id: Uuid!): IdentityServer!
  clientTemplates: [ClientTemplate!]! @authorize(policy: "ResourceAuthoringRead")
  clientTemplateById(id: Uuid!): ClientTemplate! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringRead")
  secrets: [ClientTemplateSecret!]! @authorize(policy: "ResourceAuthoringRead")
  userClaimsRules(input: GetUserClaimRulesInput!): [UserClaimRule!]! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringRead")
  userClaimsRule(id: Uuid!): UserClaimRule! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringRead")
  personalAccessToken(id: Uuid!): PersonalAccessToken! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "PersonalAccessTokenRead")
  personalAccessTokens(input: GetPersonalAccessTokensInput!): [PersonalAccessToken!]! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "PersonalAccessTokenRead")
  searchPersonalAccessTokens(input: SearchPersonalAccessTokensInput!): SearchResultOfPersonalAccessToken! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "PersonalAccessTokenRead")
  apiResources(input: GetApiResourcesInput): [ApiResource!]! @authorize(policy: "TenantResourceAccess", apply: AFTER_RESOLVER) @authorize(policy: "ResourceAuthoringRead")
  hashAlgorithms: [HashAlgorithm!]!
  resourceApprovals(input: ResourceApprovalInput): [ResourceApproval!]! @authorize(policy: "ResourceApproval")
  resourceApprovalLog(input: ResourceApprovalLogInput!): [ResourceApprovalLog!]! @authorize(policy: "ResourceAuthoringRead")
  dependencies(input: GetDependenciesInput!): Dependency! @authorize(policy: "ResourceAuthoringRead")
}

type RemoveSecretPersonalAccessTokenPayload {
  token: PersonalAccessToken
  hash: HashedToken
}

type RequestTokenPayload {
  result: RequestTokenResult!
}

type RequestTokenResult {
  isSuccess: Boolean!
  accessToken: TokenModel
  errorMessage: String
}

type ResourceApproval {
  id: Uuid!
  title: String!
  type: String!
  currentVersion: ResourceVersion!
  environments: [ResourceApprovalEnvironment!]!
}

type ResourceApprovalEnvironment {
  environment: Environment!
  version: Int
  approvedAt: DateTime
  state: String
}

type ResourceApprovalLog {
  id: Uuid!
  resourceId: Uuid!
  resourceType: String!
  environmentId: Uuid!
  version: Int!
  approvedAt: DateTime!
  requestedBy: String!
  operation: String!
  errorMessage: String
}

type ResourceAuditEvent {
  resourceId: Uuid!
  resourceType: String!
  action: String!
  timestamp: DateTime!
  changes: [ResourceChange!]!
  version: Int!
  id: Uuid!
  userId: String!
}

type ResourceChange {
  property: String!
  path: String!
  before: String
  after: String
  delta: String
  arrayIndex: Int
}

type ResourcePublishLog {
  id: Uuid!
  resourceId: Uuid!
  resourceType: String!
  environmentId: Uuid!
  identityServerGroupId: Uuid!
  version: Int!
  publishedAt: DateTime!
  requestedBy: String!
  operation: String!
  errorMessage: String
}

type ResourceVersion {
  version: Int!
  createdAt: DateTime!
  createdBy: String!
}

type SaveApiResourcePayload {
  apiResource: ApiResource
  errors: [UserError!]
}

type SaveApiScopePayload {
  apiScope: ApiScope
  errors: [UserError!]
}

type SaveClientPayload {
  client: Client
}

type SaveClientTemplatePayload {
  clientTemplate: ClientTemplate
}

type SaveEnvironmentPayload {
  environment: Environment!
  errors: [UserError!]
}

type SaveGrantTypePayload {
  grantType: GrantType!
  errors: [UserError!]
}

type SaveIdentityResourcePayload {
  identityResource: IdentityResource
  errors: [UserError!]
}

type SaveIdentityServerGroupPayload {
  serverGroup: IdentityServerGroup!
}

type SaveIdentityServerPayload {
  server: IdentityServer!
}

type SavePersonalAccessTokenPayload {
  token: PersonalAccessToken
}

type SaveTenantPayload {
  tenant: Tenant!
  errors: [UserError!]
}

type SaveUserClaimRulePayload {
  rule: UserClaimRule!
}

type SearchResultOfApplication {
  items: [Application!]!
  hasMore: Boolean!
}

type SearchResultOfClient {
  items: [Client!]!
  hasMore: Boolean!
}

type SearchResultOfIdentityServerEvent {
  items: [IdentityServerEvent!]!
  hasMore: Boolean!
}

type SearchResultOfPersonalAccessToken {
  items: [PersonalAccessToken!]!
  hasMore: Boolean!
}

type SearchResultOfResourceAuditEvent {
  items: [ResourceAuditEvent!]!
  hasMore: Boolean!
}

type Secret {
  id: Uuid!
  description: String
  value: String!
  encryptedValue: EncryptedValue!
  expiration: DateTime
  type: String!
}

type Tenant {
  id: String!
  description: String!
  color: String
  modules: [TenantModule!]!
  roleMappings: [TenantRoleMapping!]!
  emails: [String!]!
}

type TenantModule {
  name: String!
  settings: [TenantSetting!]
}

type TenantRoleMapping {
  role: String!
  claimValue: String!
  environmentId: Uuid
}

type TenantSetting {
  name: String!
  value: String!
}

type TokenClaim {
  type: String!
  value: String!
  category: ClaimCategory!
}

type TokenModel {
  validFrom: DateTime!
  validTo: DateTime!
  claims: [TokenClaim!]!
  expiresIn: Int!
  subject: String
  token: String
  tokenType: TokenType
}

type UpdateApplicationPayload {
  application: Application
}

type User {
  permissions: [String!]!
  id: String!
  name: String!
  roles: [String!]!
}

type UserClaim {
  type: String!
  value: String!
}

type UserClaimRule implements IResource {
  tenantInfo: Tenant!
  isInServerGroup(serverGroup: IdentityServerGroupInput!): Boolean!
  id: Uuid!
  name: String!
  tenant: String!
  applicationId: Uuid
  version: ResourceVersion!
  title: String!
  rules: [ClaimRuleMatch!]!
  claims: [UserClaim!]!
}

type UserError {
  message: String!
  code: String!
}

input AddApiSecretInput {
  id: Uuid!
  generator: String
  value: String
  name: String
  saveValue: Boolean
}

input AddClientInput {
  id: Uuid!
  clientId: Uuid!
}

input AddClientSecretInput {
  id: Uuid!
  generator: String
  value: String
  name: String
  saveValue: Boolean
}

input AddEnvironmentToApplicationInput {
  environments: [Uuid!]!
  id: Uuid!
}

input AddSecretPersonalAccessTokenInput {
  tokenId: Uuid!
  expiresAt: DateTime!
}

input ApproveResourceInput {
  resourceId: Uuid!
  type: String!
  environmentId: Uuid!
  version: Int!
}

input ApproveResourcesInput {
  resources: [ApproveResourceInput!]!
}

input ClaimRuleMatchInput {
  environmentId: Uuid
  claimType: String!
  value: String!
  matchMode: ClaimRuleMatchMode!
}

input ClaimsExtensionRequestInput {
  type: String!
  value: String!
}

input ClientClaimInput {
  type: String!
  value: String!
  valueType: String!
}

input ClientPropertyInput {
  key: String!
  value: String!
}

input ClientTemplateSecretInput {
  type: String
  value: String
  environmentId: Uuid!
}

input CreateApplicationInput {
  name: String!
  tenant: String!
  templateId: Uuid!
  allowedGrantTypes: [String!]!
  apiScopes: [Uuid!]!
  identityScopes: [Uuid!]!
  environments: [Uuid!]!
  redirectUris: [String!]!
}

input CreateClientInput {
  name: String!
  tenant: String!
  allowedGrantTypes: [String!]!
  environments: [Uuid!]!
  apiScopes: [Uuid!]!
  identityScopes: [Uuid!]!
  clientId: String
  clientIdGenerator: String
}

input CreatePersonalAccessTokenInput {
  userName: String!
  environmentId: Uuid!
  tenant: String!
  source: String!
  hashAlgorithm: String!
  allowedApplicationIds: [Uuid!]!
  allowedScopes: [Uuid!]!
  claimsExtensions: [ClaimsExtensionRequestInput!]!
}

input DataConnectorOptionsInput {
  name: String
  enabled: Boolean!
  profileTypeFilter: [ConnectorProfileType!]
  properties: [DataConnectorPropertyInput!]
}

input DataConnectorPropertyInput {
  name: String
  value: String
}

input EnabledProviderInput {
  name: String!
  requestMfa: Boolean!
  userIdClaimType: String
}

input GetApiResourcesInput {
  tenants: [String!]!
}

input GetApiScopesInput {
  tenants: [String!]!
}

input GetDependenciesInput {
  id: Uuid!
  type: String
}

input GetIdentityResourcesInput {
  tenants: [String!]!
}

input GetPersonalAccessTokensInput {
  tenants: [String!]!
}

input GetUserClaimRulesInput {
  tenants: [String!]!
}

input IdOpsClaimExtensionInput {
  type: String!
  value: String!
}

input IdentityServerGroupInput {
  id: Uuid!
  name: String!
  tenants: [String!]!
  color: String
}

input IpAddressFilterInput {
  policy: IpFilterPolicy!
  warnOnly: Boolean!
  allowList: [String!]!
}

input PublishResourceInput {
  resources: [Uuid!]!
  destinationEnvionmentId: Uuid!
}

input PublishedResourcesInput {
  environment: Uuid
  resourceId: [Uuid!]
  resourceTypes: [String!]
  identityServerGroupId: Uuid
  tenants: [String!]!
}

input RemoveApiSecretInput {
  apiResourceId: Uuid!
  id: Uuid!
}

input RemoveClientInput {
  id: Uuid!
  clientId: Uuid!
}

input RemoveClientSecretInput {
  clientId: Uuid!
  id: Uuid!
}

input RemoveSecretPersonalAccessTokenInput {
  tokenId: Uuid!
  secretId: Uuid!
}

input RequestTokenInput {
  authority: String!
  clientId: Uuid!
  secretId: Uuid!
  grantType: String!
  saveTokens: Boolean!
}

input ResourceApprovalInput {
  resourceIds: [Uuid!]
  resourceTypes: [String!]
  environmentId: Uuid
  identityServerGroupId: Uuid
  tenants: [String!]
}

input ResourceApprovalLogInput {
  resourceId: Uuid!
}

input ResourcePublishingLogInput {
  resourceId: Uuid!
}

input SaveApiResourceInput {
  name: String!
  displayName: String
  tenant: String!
  scopes: [Uuid!]!
  id: Uuid
  enabled: Boolean!
  description: String
}

input SaveApiScopeInput {
  name: String!
  displayName: String!
  tenant: String!
  showInDiscoveryDocument: Boolean!
  id: Uuid
  enabled: Boolean!
  description: String
}

input SaveClientTemplateInput {
  name: String!
  tenant: String!
  allowedGrantTypes: [String!]!
  secrets: [ClientTemplateSecretInput!]!
  id: Uuid
  clientIdGenerator: String
  nameTemplate: String
  urlTemplate: String
  secretGenerator: String
  postLogoutRedirectUris: [String!]
  requirePkce: Boolean!
  requireClientSecret: Boolean!
  allowAccessTokensViaBrowser: Boolean!
  allowOfflineAccess: Boolean!
  dataConnectors: [DataConnectorOptionsInput!]
  enabledProviders: [EnabledProviderInput!]
  apiScopes: [Uuid!]
  identityScopes: [Uuid!]
  redirectUris: [String!]
}

input SaveEnvironmentInput {
  name: String!
  id: Uuid
  order: Int!
}

input SaveGrantTypeInput {
  id: String!
  name: String!
  tenants: [String!]!
  isCustom: Boolean!
}

input SaveIdentityResourceInput {
  name: String!
  displayName: String!
  identityServerGroupId: Uuid!
  tenants: [String!]!
  showInDiscoveryDocument: Boolean!
  userClaims: [String!]!
  required: Boolean!
  emphasize: Boolean!
  id: Uuid
  enabled: Boolean!
  description: String
}

input SaveIdentityServerGroupInput {
  name: String!
  tenants: [String!]!
  color: String!
  id: Uuid
}

input SaveIdentityServerInput {
  name: String!
  environmentId: Uuid!
  groupId: Uuid!
  url: String!
  id: Uuid
}

input SaveTenantInput {
  id: String!
  color: String!
  description: String!
  modules: [TenantModuleInput!]
  roleMappings: [TenantRoleMappingInput!]
  emails: [String!]
}

input SaveUserClaimRuleInput {
  name: String!
  tenant: String!
  id: Uuid
  applicationId: Uuid
  claims: [UserClaimInput!]!
  rules: [ClaimRuleMatchInput!]!
}

input SearchApplicationsInput {
  searchText: String
  tenants: [String!]!
  pageSize: Int!
  pageNr: Int!
}

input SearchClientsInput {
  searchText: String
  tenants: [String!]
  environmentId: Uuid
  pageSize: Int!
  pageNr: Int!
}

input SearchIdentityServerEventsInput {
  applications: [Uuid!]
  clients: [String!]
  environments: [String!]
  eventTypes: [String!]
  pageSize: Int!
  pageNr: Int!
}

input SearchPersonalAccessTokensInput {
  searchText: String
  tenants: [String!]
  environmentId: Uuid
  pageSize: Int!
  pageNr: Int!
}

input SearchResourceApprovalLogsInput {
  resourceId: Uuid
  environmentId: Uuid
  pageSize: Int!
  pageNr: Int!
}

input SearchResourceAuditInput {
  resourceId: Uuid
  userId: String
  pageSize: Int!
  pageNr: Int!
}

input TenantModuleInput {
  name: String!
  settings: [TenantSettingInput!]
}

input TenantRoleMappingInput {
  role: String!
  claimValue: String!
  environmentId: Uuid
}

input TenantSettingInput {
  name: String!
  value: String!
}

input UpdateApplicationInput {
  id: Uuid!
  name: String!
  allowedGrantTypes: [String!]!
  apiScopes: [Uuid!]!
  identityScopes: [Uuid!]!
  redirectUris: [String!]!
}

input UpdateClientInput {
  id: Uuid!
  name: String!
  tenant: String!
  allowedGrantTypes: [String!]!
  apiScopes: [Uuid!]!
  identityScopes: [Uuid!]!
  environments: [Uuid!]!
  protocolType: String
  requireClientSecret: Boolean!
  description: String
  clientUri: String
  logoUri: String
  requireConsent: Boolean!
  allowRememberConsent: Boolean!
  requirePkce: Boolean!
  allowPlainTextPkce: Boolean!
  requireRequestObject: Boolean!
  allowTokenGeneration: Boolean!
  allowAccessTokensViaBrowser: Boolean!
  redirectUris: [String!]!
  postLogoutRedirectUris: [String!]!
  frontChannelLogoutUri: String
  frontChannelLogoutSessionRequired: Boolean!
  backChannelLogoutUri: String
  backChannelLogoutSessionRequired: Boolean!
  allowOfflineAccess: Boolean!
  alwaysIncludeUserClaimsInIdToken: Boolean!
  identityTokenLifetime: Int!
  allowedIdentityTokenSigningAlgorithms: [String!]!
  accessTokenLifetime: Int!
  authorizationCodeLifetime: Int!
  absoluteRefreshTokenLifetime: Int!
  slidingRefreshTokenLifetime: Int!
  consentLifetime: Int
  refreshTokenUsage: TokenUsage!
  updateAccessTokenClaimsOnRefresh: Boolean!
  refreshTokenExpiration: TokenExpiration!
  accessTokenType: AccessTokenType!
  alwaysSendClientClaims: Boolean!
  clientClaimsPrefix: String
  pairWiseSubjectSalt: String
  userSsoLifetime: Int
  userCodeType: String
  deviceCodeLifetime: Int!
  allowedCorsOrigins: [String!]!
  properties: [ClientPropertyInput!]
  claims: [ClientClaimInput!]
  dataConnectors: [DataConnectorOptionsInput!]
  enabledProviders: [EnabledProviderInput!]
  ipAddressFilter: IpAddressFilterInput!
}

input UpdatePersonalAccessTokenInput {
  id: Uuid!
  userName: String
  source: String
  allowedScopes: [Uuid!]
  allowedApplicationIds: [Uuid!]
  claimsExtensions: [IdOpsClaimExtensionInput!]
}

input UserClaimInput {
  type: String!
  value: String!
}

enum AccessTokenType {
  JWT
  REFERENCE
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum ClaimCategory {
  PROTOCOL
  PAYLOAD
}

enum ClaimRuleMatchMode {
  EQUALS
  CONTAINS
  START_WITH
  ENDS_WITH
  ONE_OF
  REGEX
}

enum ConnectorProfileType {
  USER_INFO
  ACCESS_TOKEN
  IDENTITY_TOKEN
}

enum IpFilterPolicy {
  INTERNAL
  ALLOW_LIST
  PUBLIC
}

enum ScopeType {
  IDENTITY
  RESOURCE
}

enum TokenExpiration {
  SLIDING
  ABSOLUTE
}

enum TokenType {
  JWT
  REFERENCE
}

enum TokenUsage {
  RE_USE
  ONE_TIME_ONLY
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar Uuid
